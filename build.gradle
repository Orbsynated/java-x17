plugins {
    id 'distribution'
    id 'signing'
}

allprojects {
    group = 'io.github.orbsynated'
    version = '1.0.4'
}

// Configure default publication (all Java projects)
allprojects { Project project ->
    afterEvaluate {
        if (pluginManager.hasPlugin('maven-publish') && pluginManager.hasPlugin('java')) {
            configure(project) {
                javadoc {
                    options.addStringOption('Xdoclint:none', '-quiet')
                    if(JavaVersion.current().isJava9Compatible()) {
                        options.addBooleanOption('html5', true)
                    }
                }
                java {
                    withJavadocJar()
                    withSourcesJar()
                }
            }
        }
    }
}

// Add publication
allprojects { Project project ->
    afterEvaluate {
        if (pluginManager.hasPlugin('maven-publish')) {
            configure(project) {
                publishing {
                    publications {
                        create(project.name, MavenPublication) {
                            artifactId = "java-${project.name.toLowerCase()}"
                            from components.java
                            versionMapping {
                                usage('java-api') {
                                    fromResolutionOf('runtimeClasspath')
                                }
                                usage('java-runtime') {
                                    fromResolutionResult()
                                }
                            }
                            pom {
                                name = "$group:$artifactId"
                                licenses {
                                    license {
                                        name = 'GNU General Public License, Version 2'
                                        url = 'https://www.gnu.org/licenses/gpl-2.0.txt'
                                        distribution = 'repo'
                                    }
                                }
                                issueManagement {
                                    system = 'Github Tracker'
                                    url = 'https://github.com/Orbsynated/java-x17/issues'
                                }
                                scm {
                                    url = 'https://github.com/Orbsynated/java-x17.git'
                                    connection = 'scm:git:https://github.com/Orbsynated/java-x17.git'
                                }
                                developers {
                                    developer {
                                        id = 'lafortune'
                                        name = 'Orbsynated'
                                        roles = ['Project Administrator', 'Developer']
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}


// Add repositories
allprojects { Project project ->
    afterEvaluate {
        if (pluginManager.hasPlugin('maven-publish')) {
            configure(project) {
                publishing {
                    repositories {
                        maven {
                            name = 'Github'
                            url = uri('https://maven.pkg.github.com/Orbsynated/java-x17')
                            credentials {
                                username = findProperty('JAVA_X17_GITHUB_USERNAME')
                                password = findProperty('JAVA_X17_GITHUB_TOKEN')
                            }
                        }
//                        maven {
//                            name = 'Sonatype'
//                            url = 'https://oss.sonatype.org/content/repositories/snapshots'
//                            credentials(PasswordCredentials) {
//                                username = findProperty('PROGUARD_STAGING_USERNAME')
//                                password = findProperty('PROGUARD_STAGING_PASSWORD')
//                            }
//                        }
                    }
                }
                if (findProperty('SHOULD_SIGN')) {
                    signing {
                        // signing.gnupg.keyName and signing.gnupg.passphrase is set in .gradle/gradle.properties
                        useGpgCmd()
                        sign publishing.publications.getByName(project.name)
                    }
                }
            }
        }
    }
}

distributions {
    main {
        distributionBaseName.set('java-x17')
        contents {
            into('lib') {
                from tasks.getByPath(':x17:fatJar').outputs
            }
            from(rootDir) {
                include 'LICENSE'
            }
        }
    }
}

distTar {
    compression = Compression.GZIP
    archiveExtension.set('tar.gz')
}

clean {
    delete file("$rootDir/lib")
}
